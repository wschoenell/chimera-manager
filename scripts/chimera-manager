#!/usr/bin/env python

################################################################################

__author__ = 'Ribeiro, T.'

################################################################################

import os
import re
import shutil
import sys
import time

import yaml
from chimera.core.cli import ChimeraCLI, action, ParameterType
from chimera.core.exceptions import printException
from chimera.util.output import blue, green, red

from chimera_manager.controllers.model import (List)
from chimera_manager.controllers.model import Session
from chimera_manager.controllers.status import InstrumentOperationFlag
from chimera_manager.core.constants import DEFAULT_PROGRAM_DATABASE


################################################################################

class Manager(ChimeraCLI):
    ############################################################################

    def __init__(self):
        ChimeraCLI.__init__(self, "chimera-manager",
                            "Manager controller", 0.0, port=9010)

        '''
        Check manager status and control some actions.
        '''

        self.addHelpGroup("SUPERVISOR", "Supervisor")
        self.addController(name="supervisor",
                           cls="Supervisor",
                           required=True,
                           help="Supervisor controller to be used",
                           helpGroup="SUPERVISOR")

        databaseHelp = """To configure the supervisor you must create a YAML file with the following format:

checklist:

    - name: LockDomeOnSunrise
      eager: False
      comment: Stop all instruments, close telescope and dome, and lock dome at sunrise.
      check:
        - type: CheckTime
          mode: 6
          deltaTime: 0.25
      responses:
        - type: StopAll
        - type: CloseTelescope
        - type: CloseDomeFlap
        - type: CloseDomeSlit
        - type: LockInstrument
          instrument: dome
          key: sunup
    - name: UnlockDomeOnSunset
      eager: False
      comment: Unlock dome on sunset. Will not open it. Just unlock.
      check:
        - type: CheckTime
          mode: 2
          deltaTime: -0.25
      responses:
        - type: UnLockInstrument
          instrument: dome
          key: sunup

        """

        self.addHelpGroup("DB", databaseHelp)
        self.addParameters(dict(name="filename",
                                long="file",
                                short="f",
                                helpGroup="DB",
                                default="",
                                help="Filename of the input database.",
                                metavar="FILENAME"))

        self.addHelpGroup("RUN", "Start/Stop/Monitor")
        self.addParameters(dict(name="instrument",
                                long="instrument",
                                helpGroup="RUN",
                                default="",
                                help="Instrument to operate on.",
                                metavar="INSTRUMENT"),
                           dict(name="flag",
                                type=ParameterType.CHOICE,
                                helpGroup="RUN",
                                choices=['%s'%flag for flag in InstrumentOperationFlag],
                                help="Instrument operation flag.",
                                metavar="FLAG"),
                           dict(name="key",
                                long="key",
                                helpGroup="RUN",
                                default=None,
                                help="Key to unlock an instrument.",
                                metavar="KEY"),
                           )
    ############################################################################

    @action(long="new",
            help="Generate a new database from a text file (excluding all programs already in database)",
            helpGroup="DB",
            actionGroup="DB")
    def newDatabase(self, options):

        # save a copy
        if os.path.exists(DEFAULT_PROGRAM_DATABASE):
            shutil.copy(DEFAULT_PROGRAM_DATABASE, "%s.%s.bak" %
                        (DEFAULT_PROGRAM_DATABASE, time.strftime("%Y%m%d%H%M%S")))

        # delete all programs
        session = Session()
        programs = session.query(List).all()
        for program in programs:
            session.delete(program)
        session.commit()

        self.generateDatabase(options)

    ############################################################################

    @action(long="append", help="Append programs to database from a text file",
            helpGroup="DB", actionGroup="DB")
    def appendDatabase(self, options):
        self.generateDatabase(options)

    ############################################################################

    def generateDatabase(self, options):

        with open(options.filename, 'r') as stream:
            try:
                checkconfig = yaml.load(stream)
            except yaml.YAMLError as exc:
                self.exit(exc)

        session = Session()

        items = []
        supervisor = self.supervisor
        checkItems = supervisor.getItems()
        responseList = supervisor.getResponses()

        show_item_list = True

        for check in checkconfig['checklist']:

            item = List(name=check['name'],
                        eager = check['eager'])

            self.out("# item: %s" % item.name)

            for itemtype in check['check']:

                if itemtype['type'].upper() in checkItems.keys():

                    checkitem = checkItems[itemtype['type'].upper()]()
                    for key in itemtype.keys():
                        if hasattr(checkitem,key):
                            setattr(checkitem,key,itemtype[key])
                    item.check.append(checkitem)
                else:
                    if show_item_list:
                        self.out('Could not find item "%s" in items list. Skipping... '
                                 'Following options are present:'%(itemtype))
                        for i in checkItems.keys():
                            self.out(' - %s'%i)
                        show_item_list = False
                    continue

            for response in check['responses']:

                rtype = responseList[response['type'].upper()].model()
                try:
                    r = rtype(response_id = response['type'].upper())
                except:
                    try:
                        r = rtype()
                    except:
                        raise

                for key in response.keys():
                    if hasattr(r,key):
                        setattr(r,key,response[key])
                item.response.append(r)

            items.append(item)

        session.add_all(items)
        session.commit()

        self.out("Manager database updated. New check list in effect from now on.")

    def generateDatabase_old(self, options):

        f = None
        try:
            f = open(options.filename, "r")
        except:
            self.exit("Could not find '%s'." % options.filename)

        session = Session()

        lineRe = re.compile('(?P<itemtype>[\w]+)\s+(?P<itemname>\'([^\\n\'\\\\]|\\\\.)*\'|"([^\\n"\\\\]|\\\\.)*"|([^ \\n"\\\\]|\\\\.)*)\s+(?P<eager>[\w]+)\s+\((?P<checkpar>[^()]*)\)'
                            '\s+(?P<responsetype>\'([^\\n\'\\\\]|\\\\.)*\'|"([^\\n"\\\\]|\\\\.)*"|([^ \\n"\\\\]|\\\\.)*)\s+\[(?P<responsepar>.*)\]')
        items = []
        supervisor = self.supervisor
        checkItems = supervisor.getItems()
        responseList = supervisor.getResponses()

        show_item_list = True

        for i, line in enumerate(f):

            if line.startswith("#"):
                continue
            if len(line) == 1:
                continue

            matchs = lineRe.search(line)

            if matchs is None:
                print "Couldn't process line #%d" % i
                continue

            params = matchs.groupdict()

            itemtype = params['itemtype'].upper()
            itemname = params['itemname'].upper()
            eager = params['eager'].upper() == 'TRUE'
            checkpars = params['checkpar'].split(",")
            responsetypes = params['responsetype'].upper().split(',')
            responsepars = re.findall(r"\((.*?)\)",params['responsepar'])

            if len(responsetypes) != len(responsepars):
                self.err("Number of responses (%i) and response parameters (%i) does not match."
                         "Skipping..." % (len(responsetypes), len(responsepars)))
                continue

            item = List(name=itemname,
                        eager=eager)


            self.out("# item: %s" % item.name)

            if itemtype in checkItems.keys():

                if len(checkpars) > 0:
                    item.check.append(checkItems[itemtype](*checkpars))
                else:
                    item.check.append(checkItems[itemtype]())

            else:
                self.out('Could not find item "%s" in items list. Skipping...'%(itemtype))

                if show_item_list:
                    self.out('Following options are present:')
                    for i in checkItems.keys():
                        self.out(' - %s'%i)
                    show_item_list = False

                continue

            for i,response in enumerate(responsetypes):
                pars = responsepars[i]
                if len(pars) == 0:
                    self.out("Adding response %s"%response)
                    rtype = responseList[response].model()
                    item.response.append(rtype(response_id=response))
                else:
                    pars = pars.split(',')
                    self.out("Adding response %s with %i parameters"%(response,len(pars)))
                    rtype = responseList[response].model()
                    item.response.append(rtype(*pars))

            items.append(item)

        session.add_all(items)
        session.commit()

        self.out("Manager database updated. New check list in effect from now on.")

    ############################################################################

    @action(help="Print manager information and exit", helpGroup="INFO")
    def info(self, options):
        manager = self.supervisor

        self.out("=" * 40)
        self.out("Manager: %s." % (manager.getLocation()))

        self.out("General status:")
        for inst_ in manager.getInstrumentList():
            flag = self._getColoredFlag(manager.getFlag(inst_))
            key = ""
            if manager.getFlag(inst_) == InstrumentOperationFlag.LOCK:
                key = ' [%s]' % manager.getInstrumentKey(inst_)

            self.out("- %s: %s %s"%(inst_,
                                    flag,
                                    key))

        self.out("=" * 40)

        session = Session()

        checklist = session.query(List)

        self.out("There are currently %i items in check list"%(checklist.count()))

        for item in checklist:
            self.out("- %s"%item)
        self.out("=" * 40)

    ############################################################################

    @action(help="Start manager", helpGroup="RUN", actionGroup="RUN")
    def start(self, options):

        manager = self.supervisor
        self.out('Starting manager... ',end='')

        if manager.start():
            self.out(green('OK'))
        else:
            self.out(red("FAILED"))

        return 0

    ############################################################################

    @action(help="Stop manager", helpGroup="RUN", actionGroup="RUN")
    def stop(self, options):

        manager = self.supervisor

        self.out('Stopping manager... ',end='')
        if manager.stop():
            self.out(green('OK'))
        else:
            self.out(red('FAILED'))

        return 0

    ############################################################################

    @action(help="Monitor manager", helpGroup="RUN", actionGroup="RUN")
    def monitor(self, options):

        return 0

    ############################################################################

    @action(help="Manually set instrument status flag (use with caution).", helpGroup="RUN")
    def set(self, options):

        flag = InstrumentOperationFlag.fromStr(options.flag)
        if flag == InstrumentOperationFlag.LOCK:
            self.exit("To manually lock an instrument use '--lock'")

        currentFlag = self.supervisor.getFlag(options.instrument)
        if currentFlag == InstrumentOperationFlag.LOCK:
            self.exit("To manually unlock an instrument use '--unlock'")

        self.out("Updating %s(%s) operation flag to %s: "%(options.instrument,
                                                         self._getColoredFlag(currentFlag),
                                                         self._getColoredFlag(flag)),
                 end='')

        try:
            self.supervisor.setFlag(options.instrument,
                                    flag)
            self.out(green('OK'))
        except Exception,e:
            self.exit("Error trying to change instrument flag. (%s)" %
                     printException(e))

    ############################################################################

    @action(help="Manually lock an instrument (use with caution).", helpGroup="RUN")
    def lock(self, options):

        if options.key is None:
            self.exit("You must provide a key to lock an instrument. Usually your name is enough."
                      "You will need it to unlock the instrument latter.")

        currentFlag = self.supervisor.getFlag(options.instrument)
        if currentFlag == InstrumentOperationFlag.LOCK:
            self.exit("Instrument %s already locked."% options.instrument)

        self.out('Locking %s'% options.instrument,
                 end='')
        try:
            self.supervisor.lockInstrument(options.instrument,
                                           options.key)
            self.out(green('OK'))
        except Exception, e:
            self.exit("Error trying to lock instrument. (%s)" %
                      printException(e))

    ############################################################################

    @action(help="Manually unlock an instrument (use with the greatest caution).", helpGroup="RUN")
    def unlock(self, options):

        if options.key is None:
            self.exit("You must provide a key to unlock an instrument.")

        currentFlag = self.supervisor.getFlag(options.instrument)
        if currentFlag != InstrumentOperationFlag.LOCK:
            self.exit("Instrument is %s not locked."% options.instrument)

        self.out('Unlocking %s'% options.instrument,
                 end='')
        try:
            self.supervisor.unlockInstrument(options.instrument,
                                             options.key)
            self.out(green('OK'))
        except Exception, e:
            self.exit("Error trying to unlock instrument. (%s)" %
                      printException(e))

    ############################################################################

    def _getColoredFlag(self,flag):

        manager = self.supervisor

        if flag == InstrumentOperationFlag.READY or flag == InstrumentOperationFlag.OPERATING:
            return green('%s'%flag)
        elif flag == InstrumentOperationFlag.UNSET:
            return blue('%s'%flag)
        else:
            return red('%s'%flag)

################################################################################

def main():
    cli = Manager()
    cli.run(sys.argv)
    cli.wait()

################################################################################

if __name__ == '__main__':
    main()

################################################################################
